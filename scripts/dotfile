#!/usr/bin/env bash

export COLOR_NC='\033[0m'
export COLOR_RED='\033[0;31m'
export COLOR_GREEN='\033[0;32m'

CONFIG_FILE="dotlist"

# Help function
show_help() {
    echo "Usage: $0 [command] [-d|--dry-run]"
    echo "Commands:"
    echo "  link      Create symbolic links based on dotfile configuration"
    echo "  unlink    Remove symbolic links defined in dotfile configuration"
    echo "  help      Show this help message"
    echo ""
    echo "Options:"
    echo "  -d, --dry-run    Show what would be done without making any changes"
    echo ""
    echo "The 'dotlist' configuration should be in the format:"
    echo "source_file:destination_file"
    echo ""
    echo "Example dotfile content:"
    echo ".vimrc:~/.vimrc"
    echo ".tmux.conf:~/.tmux.conf"
    exit 1
}

# Check if dotfile exists
check_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "Error: Configuration file '$CONFIG_FILE' does not exist"
        exit 1
    fi
}

# Resolve home directory in paths
resolve_path() {
    local path="$1"
    # Replace leading ~/ with actual home directory
    echo "${path/#\~/$HOME}"
}

# Link files
do_link() {
    local dry_run=$1

    if [ "$dry_run" = true ]; then
        echo "DRY RUN: This is a simulation, no files will be modified"
    fi
    
    while IFS=: read -r source_file target_file; do
        # Skip empty lines
        if [ -z "$source_file" ] && [ -z "$target_file" ]; then
            continue
        fi
        
        # Validate line format
        if [ -z "$source_file" ] || [ -z "$target_file" ]; then
            echo "Warning: Invalid format in line '$source_file:$target_file', skipping..."
            continue
        fi
        
        # Clean filenames
        source_file="$(PWD)/$source_file"
        target_file="$target_file"

        # Resolve
        source_file=$(resolve_path "$source_file")
        target_file=$(resolve_path "$target_file")
        
        # Check if source file exists
        if [ ! -e "$source_file" ]; then
            echo "Warning: Source file '$source_file' does not exist, skipping..."
            continue
        fi
        
        # Create target directory if it doesn't exist
        target_dir=$(dirname "$target_file")
        if [ ! -d "$target_dir" ]; then
            echo "create directory: $target_dir"
            if [ "$dry_run" = false ]; then
                mkdir -p "$target_dir"
            fi
        fi
        
        # Create symbolic link
        if [ ! -L "$target_file" ]; then
            echo -e "${COLOR_GREEN}create link: $source_file -> $target_file${COLOR_NC}"
            if [ "$dry_run" = false ]; then
                ln -sf "$source_file" "$target_file"
            fi
        else
            echo "link already exists: $target_file"
        fi
    done < "$CONFIG_FILE"
}

# Unlink files
do_unlink() {
    local dry_run=$1
    
    if [ "$dry_run" = true ]; then
        echo "DRY RUN: This is a simulation, no files will be modified"
    fi
    
    while IFS=: read -r source_file target_file; do
        # Skip empty lines
        if [ -z "$source_file" ] && [ -z "$target_file" ]; then
            continue
        fi
        
        # Validate line format
        if [ -z "$source_file" ] || [ -z "$target_file" ]; then
            echo "Warning: Invalid format in line '$source_file:$target_file', skipping..."
            continue
        fi
        
        # Clean filenames
        source_file="$PWD/$source_file"
        target_file="$target_file"

        # Resolve
        source_file=$(resolve_path "$source_file")
        target_file=$(resolve_path "$target_file")
        
        # Remove symbolic link if it exists
        if [ -L "$target_file" ]; then
            echo -e "${COLOR_GREEN}remove link: $target_file${COLOR_NC}"
            if [ "$dry_run" = false ]; then
                rm "$target_file"
            fi
        else
            echo "no link found at: $target_file"
        fi
    done < "$CONFIG_FILE"
}

# Parse command line arguments
command=""
dry_run=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--dry-run)
            dry_run=true
            shift
            ;;
        link|unlink|help)
            if [ -z "$command" ]; then
                command="$1"
            else
                echo "Error: Multiple commands specified"
                show_help
            fi
            shift
            ;;
        -h|--help)
            show_help
            ;;
        *)
            echo "Error: Unknown argument '$1'"
            show_help
            ;;
    esac
done

# Main script
case "$command" in
    link)
        check_config
        do_link "$dry_run"
        ;;
    unlink)
        check_config
        do_unlink "$dry_run"
        ;;
    help|"")
        show_help
        ;;
esac
